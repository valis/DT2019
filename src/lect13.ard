\import Utils

\func Not (A : \Type) => A -> Empty

-- 1. Равенство типов, iso.

-- Мы раньше задавались вопросом когда равны два элемента некоторого типа.
-- Например, мы видели, что две пары равны тогда и только тогда, когда они равны покомпонентно.
-- Две функции равны тогда и только тогда, когда они равны поточечно.
-- Мы можем предложить такую характеризацию для всех типов кроме \Type.

-- Посмотрим на примеры равенств между типами.
-- Можем ли мы доказать, что следующие равенства верны или ложны?
-- ? : Maybe Unit = Bool
-- ? : (\Sigma Nat Nat) = Nat
-- ? : Bool = Nat
-- Для первых двух мы ничего не можем доказать, а про последнее мы можем доказать, что оно ложно.
-- Причина заключается в том, что A = B влечет, что между A и B есть биекция, а между Bool и Nat не может быть биекции.

-- Таким образом, естественно сказать, что два типа равны, если между ними есть биекция.
-- Мы будем использовавть слово "биекция" только для множеств, а для произвольных типов мы будем говорить "эквивалентность", но определение этого понятия такое же.

\func Equiv (A B : \Type) => \Sigma (f : A -> B)
                                    (g : B -> A)
                                    (\Pi (x : A) -> g (f x) = x)
                                    (\Pi (y : B) -> f (g y) = y)

-- Мы можем показать, что если A = B, то между ними есть эквивалентность.
\func equality=>equivalence (A B : \Type) (p : A = B) : Equiv A B =>
  transport (Equiv A) p (\lam x => x, \lam x => x, \lam x => idp, \lam x => idp)

-- Функция iso, определенная в прелюдии, говорит, что верно и обратное.
\func equivalence=>equality (A B : \Type) (e : Equiv A B) : A = B =>
  path (iso e.1 e.2 e.3 e.4)

-- Если у нас есть эквивалентность f : A -> B, то мы можем написать следующую функцию:
-- \lam a => coe (iso f g p q) a right : A -> B
-- Равна ли эта функция исходной f?
-- Ответ: да, так как для coe есть следующее правило:
-- coe (iso f g p q) a right == a

-- Мы можем переписать это правило через transport вместо coe:
\func test (A B : \Type) (e : Equiv A B)
  : transport (\lam X => X) (equivalence=>equality A B e) = e.1
  => idp

-- Мы хотим не только, чтобы Equiv A B -> A = B, но и чтобы тип A = B был эквивалентен типу функций, являющимися эквивалентностями.
-- Правило, описанное выше позволяет доказать эту эквивалентность в одну сторону.
-- Ее можно доказать и в обратную, но мы не будем этого делать.

-- 2. Пример применения унивалентности.

-- Пусть у нас есть некоторый предикат
-- P : (A -> B) -> \Type
-- Пусть у нас есть две функции f и g, которые равны поточечно.
-- Правда ли, что если верно P f, то верно и P g?
-- ? : P f -> P g

-- Так как у нас есть функциональная экстенсиональность, то поточечное равенство функций влечет, что они равны, а следовательно для них верны одни и те же свойства.
-- Если бы у нас ее не было, мы не могли бы доказать этот факт.

-- Для типов можно задать аналогичный вопрос.
-- Унивалентность позволяет нам, доказав какое-то утверждение для одного типа, получить его доказателсьтво для любого равномощного ему.
-- Например, мы знаем, что равенство на Nat разрешимо.
-- Отсюда следует, что равенство на любой счетном множестве тоже разрешимо.
-- Мы можем доказать это и без унивалентности, но доказательство будет сложнее и для каждого предиката нужно выписывать своё доказательство, и существуют предкаты, для которых это вообще не верно без унивалентности.

\data Dec (E : \Type)
  | yes E
  | no (Not E)

\func DecEq (A : \Type) => \Pi (x y : A) -> Dec (x = y)

\func NatDecEq : DecEq Nat => {?} -- Мы это доказывали ранее.

\func isCountable (X : \Type) => Equiv Nat X

\func countableDecEq (X : \Type) (p : isCountable X) : DecEq X =>
  transport DecEq (equivalence=>equality Nat X p) NatDecEq

-- 3. Пропозициональная экстенсиональность.

-- Частный случай унивалентности -- это экстенсиональность для утверждений.
-- Чтобы доказать, что два утверждения равны, достаточно доказать, что одно влечет второе, и второе влечет первое.

\func propExt (A B : \Prop) (f : A -> B) (g : B -> A) : A = B =>
  equivalence=>equality A B (f, g, \lam x => idp, \lam y => idp)

-- 4. \Set не является множеством.

-- Равенства между двумя множествами -- это просто биекции между ними.
-- Следовательно тип таких равенств не является утверждением, так как существуют множества с двумя различными биекциями между ними.
-- Другими словами, \Set не является множеством.

\func isSet (A : \Type) => \Pi (x y : A) -> \Pi (p q : x = y) -> p = q

\func not-not (b : Bool) : not (not b) = b
  | true => idp
  | false => idp

\func true/=false (p : true = false) : Empty => absurd (transport T p ())

\func Set-isNotSet (p : isSet \Set) : Empty =>
  \let -- Сначала мы определяем равенство между idp и равенством, соответствующим not.
       | idp=not => p Bool Bool idp
                      (equivalence=>equality Bool Bool (not, not, not-not, not-not))
       -- Теперь легко показать, что биекции, соответствующие этим двум равенствам, равны.
       -- То есть, что тождественная функция равна not.
       | id=not : (\lam x => x) = not => pmap (transport (\lam X => X)) idp=not
  -- Теперь легко получить противоречие.
  \in true/=false (pmap (\lam f => f true) id=not)

-- 5. Свойства операций над =.

-- Так как равенства могут быть нетривиальными типами, то различные операции над ними могут быть нетривиальными функциями, а не просто доказательствами импликаций.
-- Например, функция, доказывающая транзитивность, примененная к \Set задает композицию биекций.
-- \func \infixr 5 *> {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a''
--   => transport (\lam x => a = x) q p

-- Мы можем доказывать различные свойства этой функции.
-- Например, idp является единицей справа и слева для *.
\func idp-right {A : \Type} {x y : A} (p : x = y) : p *> idp = p => idp

\func idp-left {A : \Type} {x y : A} (p : x = y) : idp *> p = p
  => J (\lam y' p' => idp *> p' = p') idp p
  {- \elim p
     | idp => idp
  -}

-- * ассоциативна.
\func *-assoc {A : \Type} {x y z w : A} (p : x = y) (q : y = z) (r : z = w)
  : (p *> q) *> r = p *> (q *> r)
  => J (\lam w' r' => (p *> q) *> r' = p *> (q *> r')) idp r
  {- \elim r
     | idp => idp
  -}

-- sym возвращает обратный элемент.
\func sym-left {A : \Type} {x y : A} (p : x = y) : sym p *> p = idp
  => J (\lam y' p' => sym p' *> p' = idp) idp p
  {- \elim p
     | idp => idp
  -}

\func sym-right {A : \Type} {x y : A} (p : x = y) : p *> sym p = idp
  => J (\lam y' p' => p' *> sym p' = idp) idp p
  {- \elim p
     | idp => idp
  -}

-- То есть * похожа на операцию в группе.
-- Мы можем доказать различные равенства, верные в группах.
-- Например, мы можем доказать, что можно сокращать слева на элемент.
\func cancelLeft {A : \Type} {x y z : A}
                  (p : x = y) (q r : y = z) (s : p *> q = p *> r) : q = r
  => sym (idp-left q) *> pmap (`*> q) (sym (sym-left p)) *> *-assoc (sym p) p q *> pmap (sym p *>) s *> sym (*-assoc (sym p) p r) *> pmap (`*> r) (sym-left p) *> idp-left r
  {- \elim p
     | idp => sym (idp-left q) *> s *> idp-left r
  -}

-- 6. Утверждения являются множествами.

\func isProp (A : \Type) => \Pi (x y : A) -> x = y

-- Любое утверждение является множеством.
\func isProp=>isSet (A : \Type) (t : isProp A) : isSet A
  => \lam x y p q => aux A t x y p *> sym (aux A t x y q)
  \where
    \func aux (A : \Type) (t : isProp A) (x y : A) (p : x = y)
      : p = sym (t x x) *> t x y \elim p
      | idp => sym (sym-left (t x x))
{-
  -- Сначала докажем, что любой p равен t x y * inv (t y y)
  -- Это легко сделать при помощи J.
  \let f (x y : A) (p : x = y) : t x y *> sym (t y y) = p =>
          J (\lam y' p' => t x y' *> sym (t y' y') = p') (sym-right (t x x)) p
  -- Теперь можно доказать, что любые p и q равны.
  \in \lam x y p q => sym (f x y p) *> f x y q
-}

-- 7. Лемма про эквивалентность равенств.

-- Мы докажем лемму, которая полезна когда нужно доказать, что некоторый тип является множеством.

-- Пусть у нас есть некоторый тип A, про который мы хотим доказать, что он является множеством.
-- A : \Type

-- Пусть у нас есть некоторое отношение на нем.
-- R : A -> A -> \Type

-- Допустим R x y является утверждением, R рефлексивно, и R x y влечет x = y.
-- R-isProp : \Pi (x y : A) -> isProp (R x y)
-- R-isRefl : \Pi (x : A) -> R x x
-- R-implies= : \Pi {x y : A} -> R x y -> x = y
-- Тогда A -- множество.

-- Во-первых, заметим, что R рефлексивно тогда и только тогда, когда =-impliesR : \Pi {x y : A} -> x = y -> R x y
-- Таким образом, мы знаем, что R x y -> x = y и x = y -> R x y.
-- Если мы можем доказать, что эти функции взаимно обратны, то мы получим, что x = y является утвержденим, что нам и требуется доказать.
-- Мы знаем, что =-impliesR (R-implies= r) = r, так как R x y является утверждением.
-- Следовательно, нам необходимо доказать, что \Pi {x y : A} (p : x = y) -> R-implies= (=-impliesR p) = p

-- Определим функцию H следующим образом.
-- H : \Pi {x y : A} -> x = y -> x = y
-- H p => R-implies= (=-impliesR p)

-- Нам нужно доказать, что H p = p.
-- Применив J, нам достаточно доказать, что H idp = idp.
-- Мы знаем, что для всех p : x = y верно, что H (H p) = H p.
-- Кроме того, для всех p : x = y верно, что H p = H idp * p.
-- Отсюда следует необходимое равенство.

\func SetLemma {A : \Type}
               (R : A -> A -> \Type)
               (R-isProp : \Pi (x y : A) -> isProp (R x y))
               (R-isRefl : \Pi (x : A) -> R x x)
               (R-implies= : \Pi {x y : A} -> R x y -> x = y) =>
  \let | =-impliesR {x y : A} (p : x = y) : R x y => transport (R x) p (R-isRefl x)
       | R=R {x y : A} (p : R x y) : =-impliesR (R-implies= p) = p => R-isProp x y _ _
       | H {x y : A} (p : x = y) => R-implies= (=-impliesR p)
       | H-isIdemp {x y : A} (p : x = y) : H (H p) = H p => pmap R-implies= (R=R _)
       | H-property {x y : A} (p : x = y) : H p = H idp *> p => J (\lam _ p' => H p' = H idp *> p') idp p
       | H-idp {x : A} : H {x} idp = idp => cancelLeft (H idp) (H idp) idp (sym (H-property (H idp)) *> H-isIdemp idp)
       | H-isId {x y : A} (p : x = y) : H p = p => J (\lam _ p' => H p' = p') H-idp p
  \in \lam x y p q => sym (H-isId p) *> pmap R-implies= (R-isProp x y (=-impliesR p) (=-impliesR q)) *> H-isId q
