\import Utils
\open Nat

-- 1. filter через \case и через helper.

-- \case можно использовать для паттерн матчинга на произвольных выражениях так же как и в хаселле.
\func filter {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons x xs => \case p x \with {
    | true => cons x (filter p xs)
    | false => filter p xs
  }

-- Любую функцию, определенную через \case, можно переписать при помощи вспомогательной функции.
\func filter' {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons x xs => helper (p x) x (filter p xs)
  \where
    \func helper {A : \Type} (b : Bool) (x : A) (r : List A) : List A \elim b
      | true => cons x r
      | false => r

-- 2. \case в языках с зависимыми типами является более сложной конструкцией в общем случаее, чем в языках без них.

-- foo лучше доказать, просто обобщив утверждение, но мы докажем ее через \case, чтобы продемонстировать возможности этой конструкции.
\func foo {A : \Type} (p : A -> Bool) (a : A) : p a = not (not (p a)) =>
   \case p a \as b \return b = not (not b) \with {
     | true => idp
     | false => idp
   }

-- foo можно переписать через helper.
\func foo' {A : \Type} (p : A -> Bool) (a : A) : p a = not (not (p a)) =>
  helper (p a)
  \where
    \func helper (b : Bool) : b = not (not b) \elim b
      | true => idp
      | false => idp

-- 2. \case по нескольким аргументам.

\data Ordering | LT | EQ | GT

-- В \case можно паттерн матчиться сразу по нескольким значениям.
\func compare (x y : Nat) : Ordering =>
  \case x < y, y < x \with {
    | true, true => EQ -- Здесь можно вернуть что угодно.
    | true, false => LT
    | false, true => GT
    | false, false => EQ
  }

-- 3. Пример доказательств через \case.

\func \infix 4 <= (x y : Nat) : \Type
  | 0, _ => \Sigma
  | suc _, 0 => Empty
  | suc x, suc y => x <= y

\func length {A : \Type} (xs : List A) : Nat
  | nil => 0
  | cons _ xs => suc (length xs)

-- Вспомогательное утверждение.
\func <=-helper {x y : Nat} (p : x <= y) : x <= suc y \elim x, y
  | 0, _ => ()
  | suc x, 0 => absurd p
  | suc x, suc y => <=-helper p

-- Докажем, что длина отфильтрованного списка не превышает длины исходного.
\func filter-lem {A : \Type} (p : A -> Bool) (xs : List A) : length (filter p xs) <= length xs \elim xs
  | nil => ()
  | cons a l => \case p a \as b \return
                                  length (\case b \with {
                                    | true => cons a (filter p l)
                                    | false => filter p l
                                  }) <= suc (length l)
  \with {
    | true => filter-lem p l
    | false => <=-helper (filter-lem p l)
  }

-- 4. \case на idp.

-- Когда мы паттерн матчимся на некотором значении e, связь этого выражения с резльтатом паттерн матчинга теряется.
-- Например, в выражении \case e \with { | pat => expr } в expr мы даже не сможем доказать, что e равно pat.
-- Иногда бывает необходимо запоминать эту связь.
-- Для этого можно использовать следующий трюк.
-- Мы в \case кроме самого выражения еще паттерн матчимся на idp, но указываем ему тип, который зависит от первого значения.
-- Тогда в каждом случае q будем доказательством равенства между исходным значением и паттерном.
\func baz {A : \Type} (B : Bool -> \Type) (p : A -> Bool) (a : A) (pt : B true) (pf : B false) : B (p a) =>
    -- Мы можем явно указывать не только тип возвращаемого значения, но и типы выражений, на которых мы паттерн матчимся.
    -- И в них также можно использовать переменные, связанные в \as.
    \case p a \as b, idp : b = p a \with {
      | true, q => transport B q pt
      | false, q => transport B q pf
    }

-- Перепишем baz через вспомогательную функцию.
\func baz' {A : \Type} (B : Bool -> \Type) (p : A -> Bool) (a : A) (pt : B true) (pf : B false) : B (p a) => 
  helper B p a pt pf (p a) idp
  \where
    \func helper {A : \Type} (B : Bool -> \Type) (p : A -> Bool) (a : A) (pt : B true) (pf : B false) (b : Bool) (q : b = p a) : B (p a) \elim b
      | true => transport B q pt
      | false => transport B q pf

-- 5. Еще один пример.

-- Через \case.
\func bar {A : \Type} (p q : A -> Bool) (a : A) (s : q a = not (p a))
  : not (q a) = p a =>
  \case p a \as x, q a \as y, s : y = not x \return not y = x \with {
    | true, true, s' => sym s'
    | true, false, s' => idp
    | false, true, s' => idp
    | false, false, s' => sym s'
  }

-- Через helper.
\func bar' {A : \Type} (p q : A -> Bool) (a : A) (s : q a = not (p a))
  : not (q a) = p a => helper (p a) (q a) s
  \where
    \func helper (x y : Bool) (s : y = not x) : not y = x \elim x, y
      | true, true => sym s
      | true, false => idp
      | false, true => idp
      | false, false => sym s

-- 6. Views.

-- views -- это техника, которая позволяет определять подобие кастомного паттерн матчинга на типах данных.
-- Например, у Nat по умолчанию два паттерна: zero и suc.
-- Но мы можем определить подобие своего принципа паттерн матчинга, где у Nat будет два констуктора: even и odd.

-- Для этого мы определяем тип, параметризованный нашим типом данных (в данном примере Nat).
-- У него будет столько конструкторов с соответствующими параметрами сколько должно быть в соответсвующем принципе паттерн матчинга.
-- У каждого конструктора должен быть еще параметр вида n = expr, где expr -- это паттерн, с которым матчится значение.
\data Parity (n : Nat)
  | even (k : Nat) (p : n = 2 * k)
  | odd (k : Nat) (p : n = 2 * k + 1)

-- Потом мы определяем функцию, которая для каждого n возвращает элемент этого типа данных, параметризованного n.
\func parity (n : Nat) : Parity n
  | 0 => even 0 idp
  | suc n => \case parity n \with {
    | even k p => odd k (pmap suc p)
    | odd k p => even (suc k) (pmap suc p)
  }

-- Теперь, чтобы использовать новый принцип паттерн матчинга достаточно сделать \case на этой функции.
-- Например, мы легко можем определить функцию деления на 2.
\func div2 (n : Nat) : Nat => \case parity n \with {
  | even k _ => k
  | odd k _ => k
  }

-- 7. Разрешимые предикаты.

-- Предикат -- это функция вида P : A -> \Type.
-- Предикат называется разрешимым, если существует алгоритм, разрешающий его, то есть по a : A возвращающий true, если P a верно, и false, если ложно.

-- Так как у нас логика интуиционистская, то не все предикаты разрешимы.
-- На самом деле, исключенное третье эквивалентно утверждению о том, что все предикаты разрешимы.

-- Пример неразрешимого предиката, который мы запишем неформально, так как его формальное описание будет довольно длинным.
-- P : Nat -> \Type
-- P n = "останавливается ли машина Тьюринга с номером n на входе n"
--
-- Мы не можем ни доказать, что P разрешим, ни опровергнуть это, так как мы не предполагаем ни исключенное третье, ни его отрицание.
--
-- Более простой пример неразрешимого предиката -- это предикат равенства двух функций типа Nat -> Nat.

-- Мы можем определить предикат разрешимости на предикатах.
\data Decide (A : \Type)
  | yes A
  | no (A -> Empty)

-- DecPred P верно в тогда и только тогда, когда P разрешим.
\func DecPred {A : \Type} (P : A -> \Type) => \Pi (a : A) -> Decide (P a)

-- Например, предикат \lam n => n = 0 разрешим.
\func decide0 : DecPred (\lam (n : Nat) => n = 0) => \lam n =>
  \case n \as x \return Decide (x = 0) \with {
    | 0 => yes idp
    | suc _ => no suc/=0
  }

-- 8. Разрешимое равенство.

\func suc/=0 {n : Nat} (p : suc n = 0) : Empty => transport (\lam n => \case n \with { | 0 => Empty | suc _ => \Sigma }) p ()

-- DecEq A верно в точности тогда, когда предикат равенства на A разрешим.
\func DecEq (A : \Type) => \Pi (a a' : A) -> Decide (a = a')

-- Мы можем определить класс типов, являющийся аналогом Eq в хаскелле, но в котором вместо функции == : A -> A -> Bool будет хранится доказательство, что равенство разрешимо.
-- Это лучше, так как в хаскелле в качестве == мы можем написать вообще произвольную функцию, даже такую, которая не имеет никакого смысла.
-- А при таком определении Eq функция равенства всегда будет определена корректно.
\class Eq (A : \Type) {
  | decideEq : DecEq A
  -- Функции, объявленные внутри класса принимают неявно инстанс этого класса в качестве первого аргумента.
  \func \infix 4 == (a a' : A) : Bool => \case decideEq a a' \with {
    | yes _ => true
    | no _ => false
  }
} \where {
  -- Функция == выше полностью эквивалентна функции =='.
  \func \infix 4 ==' {e : Eq} (a a' : e.A) : Bool => \case e.decideEq a a' \with {
    | yes _ => true
    | no _ => false
  }
}

\open Eq(==)

\func pred (n : Nat) : Nat
  | 0 => 0
  | suc n => n

-- Докажем, что равенство натуральных чисел разрешимо.
\instance NatEq : Eq Nat
  | decideEq => decideEq
  \where
    \func decideEq (x y : Nat) : Decide (x = y)
      | 0, 0 => yes idp
      | 0, suc y => no (\lam p => suc/=0 (sym p))
      | suc x, 0 => no suc/=0
      | suc x, suc y => \case decideEq x y \with {
        | yes p => yes (pmap suc p)
        | no c => no (\lam p => c (pmap pred p))
      }

\func test1 : (0 == 0) = true => idp
\func test2 : (0 == 1) = false => idp

-- 9. Предикаты A -> Bool

-- Разрешимые предикаты вида A -> \Type в точности соответствуют функциям вида A -> Bool.

-- Легко построить функции из A -> Bool в тип разрешимых предикатов и наоборот.
-- Эти функции почти взаимно обратны. Это будет верно, если правильно сформулировать это утверждение.
\func FromBoolToDec {A : \Type} (p : A -> Bool) : \Sigma (P : A -> \Type) (DecPred P)
  => (\lam a => T (p a), \lam a => \case p a \as b \return Decide (T b) \with {
    | true => yes ()
    | false => no (\lam x => x)
  })

\func FromDecToBool {A : \Type} (P : \Sigma (P : A -> \Type) (DecPred P)) : A -> Bool
  => \lam a => \case P.2 a \with {
    | yes _ => true
    | no _ => false
  }

-- 10. Вселенные, полиморфизм по уровням.

-- Тип \Type0 содержит все типы, которые не упоминают \Type0.
-- Тип \Type1 содержит все типы, которые могут упоминать \Type0, но не \Type1.
-- И так далее. Тип \Type n содержит все типы, которые упоминают только \Type i для i < n.
-- Тип \Type i называется вселенной, а число i называется уровнем вселенной.
\func ttt : \Type2 => \Type0 -> \Type1

-- У каждого определения есть неявный параметр-уровень, к которому можно обратиться, написав \lp.
-- Например, функция id, определенная выше, эквивалентна такому определению:
\func id_ (A : \Type \lp) (a : A) => a

-- Когда мы пишем \Type без указания уровня, тайпчекер сам выводит минимальный подходящий уровень.
\func type : \Type => \Type

-- Например, в примере выше у \Type, который написан в теле функции, будет выведен уровень \lp.
-- У \Type, который написан в типе, уровень \lp не может быть, так как не верно, что \Type \lp : \Type \lp, поэтому он будет на 1 выше, то есть \suc \lp.
\func type_ : \Type (\suc \lp) => \Type \lp

-- На уровнях есть небольшой набор операций:
-- * Любое натуральное число является уровнем
-- * \suc l
-- * \max l1 l2
-- То есть любой уровень является либо константой, либо эквивалентен уровню вида \max (\lp + c) c', где c и c' -- константы, а \lp + c -- это уровень вида \suc (\suc ... (\suc \lp) ... ).
-- Уровень пи-типов и других конструкций над типами -- это максимум из уровней типов, входящих в эту конструкцию.
\func test0 : \Type (\max (\suc (\suc \lp)) 4) => \Type (\max \lp 3) -> \Type (\suc \lp)

-- Когда мы определяем полиморфную функцию, такую как id, мы хотим, чтобы тип A мог лежать в любой вселенной.
-- Поэтому все функции (и остальные определения) полиморфны по уровню вселенной, в которой они лежат.
\func id (A : \Type) (a : A) => a

-- Еще несколько примеров:
\func test1_ => id Nat 0
\func test2_ => id \Type0 Nat
\func test3 => id (\Type0 -> \Type1) (\lam X => X)
\func test4 => id _ id
\func test4' => id (\Pi (A : \Type) -> A -> A) id

-- При обращении к определению можно явно указать его уровень, то есть чему будет равен параметр \lp:
\func test5 => id (\Type \lp) Nat
-- Либо так:
\func test5' => id (\level (\suc \lp) _) (\Type \lp) Nat
-- Второй вариант синтаксиса полезен когда уровень является константой:
\func test6 => id (\level 2 _) \Type1 \Type0
-- Если при обращению к определению уровень не указан явно, он будет выведен автоматически как и в случае с \Type.
-- В большинстве случаев нет необходимости указывать уровень явно.

-- Параметры \data не влияют на его уровень.
\data Magma' (A : \Type)
  | con (A -> A -> A)

\func test7 : \Type \lp => Magma' \lp Nat

-- Уровень класса зависит от того, какие поля реализованы.
\class Magma (A : \Type)
  | \infixl 6 ** : A -> A -> A

-- Например, уровень Magma \lp -- это \Type (\suc \lp), так как в определении Magma \lp появляется вселенная \Type \lp.
\func test8 : \Type (\suc \lp) => Magma \lp

-- Но уровень Magma \lp Nat -- это просто \Type 0, так как в нереализованных полях Magma Nat не встречаются вселенные.
\func test9 : \Type \lp => Magma \lp Nat

\class Functor (F : \Type -> \Type)
  | fmap {A B : \Type} : (A -> B) -> F A -> F B

-- Уровень Functor \lp будет \Type (\suc \lp) даже если поле F реализовано, так как в поле fmap тоже появляется \Type \lp.

\func test10 : \Type (\suc \lp) => Functor \lp

\func test11 : \Type (\suc \lp) => Functor \lp Maybe
